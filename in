import { Button, TextField } from '@mui/material';
import React, { useState, useEffect, useRef } from 'react';

function App() {
  const [messages, setMessages] = useState([]);
  const [inputText, setInputText] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef(null);

  // Scroll automático al último mensaje
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const handleInputChange = (event) => {
    setInputText(event.target.value);
  };

  const sendMessage = async () => {
    if (inputText.trim()) {
      const userMessage = { text: inputText, sender: 'user' };
      setMessages(prevMessages => [...prevMessages, userMessage]);
      setInputText('');
      setIsLoading(true);

      try {
        // Llamada a la API de Gemini
        const apiKey = 'AIzaSyCpsYM3E7OZh4HrzoMrEEhm-tFycMI9Lew'; // Clave API para pruebas
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta2/models/gemini-2:generateMessage?key=${apiKey}`;

        const response = await fetch(apiUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            prompt: {
              messages: [
                { author: 'user', content: inputText }
              ]
            }
          }),
        });

        if (!response.ok) {
          throw new Error(`Error de la API: ${response.status}`);
        }

        const data = await response.json();
        const botMessage = {
          text: data.candidates?.[0]?.content || 'No se recibió respuesta del servidor.',
          sender: 'bot'
        };
        setMessages(prevMessages => [...prevMessages, botMessage]);
      } catch (error) {
        console.error('Error al obtener respuesta de Gemini:', error);
        const errorMessage = { text: `Error: ${error.message}`, sender: 'bot' };
        setMessages(prevMessages => [...prevMessages, errorMessage]);
      } finally {
        setIsLoading(false);
      }
    }
  };

  return (
    <div style={{ height: '100vh', display: 'flex', flexDirection: 'column' }}>
      <div
        style={{
          flex: 1,
          overflowY: 'auto',
          padding: '10px',
          backgroundColor: '#f9f9f9',
        }}
      >
        {/* Mostrar mensajes */}
        {messages.map((message, index) => (
          <div
            key={index}
            style={{
              textAlign: message.sender === 'user' ? 'right' : 'left',
              color: message.sender === 'user' ? 'blue' : 'green',
              backgroundColor: message.sender === 'user' ? '#eef' : '#e8f5e9',
              padding: '8px',
              margin: '5px 0',
              borderRadius: '8px',
              display: 'inline-block',
              maxWidth: '80%',
            }}
          >
            <b>{message.sender === 'user' ? 'Tú' : 'Bot'}:</b> {message.text}
          </div>
        ))}
        <div ref={messagesEndRef}></div>
      </div>

      {/* Campo de entrada y botón */}
      <div
        style={{
          display: 'flex',
          alignItems: 'center',
          gap: '10px',
          padding: '10px',
          borderTop: '1px solid #ccc',
          backgroundColor: '#fff',
        }}
      >
        <TextField
          label="Escribe tu mensaje..."
          variant="outlined"
          fullWidth
          value={inputText}
          onChange={handleInputChange}
        />
        <Button
          variant="contained"
          color="primary"
          disabled={!inputText.trim() || isLoading}
          onClick={sendMessage}
        >
          {isLoading ? 'Cargando...' : 'Enviar'}
        </Button>
      </div>
    </div>
  );
}

export default App;
